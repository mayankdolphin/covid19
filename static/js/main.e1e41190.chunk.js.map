{"version":3,"sources":["Component/StateData.js","Component/CountryData.js","Component/FetchData.js","Component/DistrictData.js","Component/FetchStateData.js","App.js","serviceWorker.js","index.js"],"names":["StateData","stateData","statecode","key","to","state","confirmed","parseInt","deltaconfirmed","className","active","recovered","deltarecovered","deaths","deltadeaths","CountryData","FetchData","loading","states","fetch","response","json","data","this","setState","statewise","scope","map","React","Component","DistrictData","props","stateName","delta","deceased","FetchStateData","statesWiseData","code","match","params","console","log","colSpan","districtData","district","Home","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e1e41190.chunk.js","sourcesContent":["import React  from 'react';\nimport { Link } from \"react-router-dom\";\n\n\nfunction StateData({stateData}) {\n    if (stateData.statecode !== 'TT'){       \n    return (\n            <tr key={stateData.statecode}>\n            <th>{stateData.statecode === 'TT' ? 'India' : <Link to={`/covid19/statewise/${stateData.statecode}`}>{stateData.state}</Link>}</th>\n            <td>\n                {stateData.confirmed} {parseInt(stateData.deltaconfirmed) ? (<span className=\"text-danger\">[+{stateData.deltaconfirmed}]</span>) : ''}\n            </td>\n            <td>\n                {stateData.active}\n            </td>\n            <td>\n                {stateData.recovered} {parseInt(stateData.deltarecovered) ? (<span className=\"text-success\">[+{stateData.deltarecovered}]</span>) : ''}\n            </td>\n            <td>\n                {stateData.deaths} {parseInt(stateData.deltadeaths) ? (<span className=\"text-secondary\">[+{stateData.deltadeaths}]</span>) : ''}\n            </td>\n        </tr>\n    );\n    }\n}\nexport default StateData;","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\n\nfunction CountryData({ stateData }) {\n    if (stateData.statecode === 'TT'){       \n    return (\n        <tr key={stateData.statecode} className=\"table-secondary\">\n            <th className=\"thead-light\">{stateData.statecode === 'TT' ? 'India' : <Link to={`/covid19/statewise/${stateData.statecode}`}>{stateData.state}</Link>}</th>\n            <td>\n                {stateData.confirmed} {parseInt(stateData.deltaconfirmed) ? (<span className=\"text-danger\">[+{stateData.deltaconfirmed}]</span>) : ''}\n            </td>\n            <td>\n                {stateData.active}\n            </td>\n            <td>\n                {stateData.recovered} {parseInt(stateData.deltarecovered) ? (<span className=\"text-success\">[+{stateData.deltarecovered}]</span>) : ''}\n            </td>\n            <td>\n                {stateData.deaths} {parseInt(stateData.deltadeaths) ? (<span className=\"text-secondary\">[+{stateData.deltadeaths}]</span>) : ''}\n            </td>\n        </tr>\n        \n    );\n    }\n    \n}\nexport default CountryData;","import React from \"react\";\nimport StateData from \"./StateData\";\nimport CountryData from \"./CountryData\";\n\nexport default class FetchData extends React.Component {\n    state = {\n        loading: true,\n        states: null\n    };\n\n    async componentDidMount() {\n        const url = \"https://api.covid19india.org/data.json\";\n        const response = await fetch(url);\n        const data = await response.json();\n        this.setState({ states: data.statewise, loading: false });\n    }\n\n    render() {\n        if (this.state.loading) {\n            return <div>loading...</div>;\n        }\n\n        if (!this.state.states) {\n            return <div>didn't get a states</div>;\n        }\n        return (\n            <div className=\"table-responsive-sm\">\n                <table className=\"table table-bordered table-hover\">\n                    <thead className=\"thead-light\">\n                        <tr>\n                            <th className=\"table-active\" scope=\"col\">#</th>\n                            <th className=\"table-danger\" scope=\"col\">Confirmed</th>\n                            <th className=\"table-primary\" scope=\"col\">Active</th>\n                            <th className=\"table-success\" scope=\"col\">Recovered</th>\n                            <th className=\"table-secondary\" scope=\"col\">Deceased</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.states.map(stateData => (\n                            stateData.statecode === 'TT' ? <CountryData stateData={stateData} key={stateData.statecode} /> : <StateData stateData={stateData} key={stateData.statecode} />\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n    \n}","import React from 'react';\n\nfunction DistrictData(props) {\n    return (\n        <tr>\n            <th>{props.stateName === 'Ahmadabad' ? 'Ahmedabad' : props.stateName}</th>\n            <td>\n                {props.stateData.confirmed} {props.stateData.delta.confirmed ? (<span className=\"text-danger\">[+{props.stateData.delta.confirmed}]</span>) : ''}\n            </td>\n            <td>\n                {props.stateData.active}\n            </td>\n            <td>\n                {props.stateData.recovered} {props.stateData.delta.recovered ? (<span className=\"text-success\">[+{props.stateData.delta.recovered}]</span>) : ''}\n            </td>\n            <td>\n                {props.stateData.deceased} {props.stateData.delta.deceased ? (<span className=\"text-secondary\">[+{props.stateData.delta.deceased}]</span>) : ''}\n            </td>\n        </tr>\n    );\n}\nexport default DistrictData;","import React from \"react\";\nimport DistrictData from \"./DistrictData\";\n\nexport default class FetchStateData extends React.Component {\n    state = {\n        loading: true,\n        statesWiseData: null\n    };\n\n    async componentDidMount() {\n        const code = this.props.match.params.code;\n        const url = \"https://api.covid19india.org/v2/state_district_wise.json\";\n        const response = await fetch(url);\n        const data = await response.json();\n        data.map(stateData => (\n            stateData.statecode === code ? this.setState({ statesWiseData: stateData, loading: false  }) : ''\n        ));\n        \n    }\n\n    render() {\n        console.log(this.props.match);\n        if (this.state.loading) {\n            return <div className=\"loader\"></div>;\n        }\n\n        if (!this.state.statesWiseData) {\n            return <div>didn't get a states</div>;\n        }\n        \n        return (\n            <div className=\"table-responsive\">\n                <table className=\"table table-bordered table-hover\">\n                    <thead className=\"thead-light\">\n                        <tr>\n                            <th className=\"table-active\" scope=\"col\">#</th>\n                            <th className=\"table-danger\" scope=\"col\">Confirmed</th>\n                            <th className=\"table-primary\" scope=\"col\">Active</th>\n                            <th className=\"table-success\" scope=\"col\">Recovered</th>\n                            <th className=\"table-secondary\" scope=\"col\">Deceased</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr><td colSpan=\"5\"><strong>{this.state.statesWiseData.state} District Report</strong></td></tr>\n                        {this.state.statesWiseData.districtData.map(districtData => (                            \n                            <DistrictData stateData={districtData} stateName={districtData.district} />\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport './App.css';\nimport {  BrowserRouter as Router,  Switch,  Route, Link} from \"react-router-dom\";\nimport FetchData from './Component/FetchData';\nimport FetchStateData from './Component/FetchStateData';\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n        <div className=\"container\">\n          <div className=\"text-center covid-center\">\n            <h3 className=\"text-center col-lg-12\"><Link to={`/covid19`}>Covid19 India</Link></h3>\n        <Switch>         \n          <Route path=\"/covid19/\" exact>\n            <Home />\n          </Route>\n          <Route path=\"/covid19/statewise/:code\" exact component={FetchStateData} />\n        </Switch>\n          </div>\n        </div>\n    </div>\n    </Router>\n  );\n}\nfunction Home() {\n  return (\n    \n        <FetchData />\n      \n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}