{"version":3,"sources":["Component/DistrictData.js","Component/StateData.js","Component/FetchData.js","Component/FetchStateData.js","App.js","serviceWorker.js","index.js"],"names":["DistrictData","props","stateName","className","stateData","confirmed","delta","active","recovered","deceased","StateData","statecode","key","state","deltaconfirmed","deltarecovered","deaths","deltadeaths","FetchData","loading","person","fetch","response","json","data","this","setState","states","statewise","map","React","Component","FetchStateData","GJData","statesWiseData","console","log","class","scope","districtData","district","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yPAaeA,MAXf,SAAsBC,GAClB,OACI,4BACI,4BAAyB,cAApBA,EAAMC,UAA4B,YAAcD,EAAMC,WAC3D,wBAAIC,UAAU,gBAAgBF,EAAMG,UAAUC,UAA9C,MAA4DJ,EAAMG,UAAUE,MAAMD,UAAlF,KACA,wBAAIF,UAAU,iBAAiBF,EAAMG,UAAUG,QAC/C,wBAAIJ,UAAU,iBAAiBF,EAAMG,UAAUI,UAA/C,MAA6DP,EAAMG,UAAUE,MAAME,UAAnF,KACA,wBAAIL,UAAU,mBAAmBF,EAAMG,UAAUK,SAAjD,MAA8DR,EAAMG,UAAUE,MAAMG,SAApF,OCQGC,MAff,YAAiC,IAAbN,EAAY,EAAZA,UAChB,MAA4B,OAAxBA,EAAUO,WAA8C,OAAxBP,EAAUO,UAE1C,wBAAIC,IAAKR,EAAUO,WACf,4BAA6B,OAAxBP,EAAUO,UAAoB,QAASP,EAAUS,OACtD,wBAAIV,UAAU,gBAAgBC,EAAUC,UAAxC,MAAsDD,EAAUU,eAAhE,KACA,wBAAIX,UAAU,iBAAiBC,EAAUG,QACzC,wBAAIJ,UAAU,iBAAiBC,EAAUI,UAAzC,MAAuDJ,EAAUW,eAAjE,KACA,wBAAIZ,UAAU,mBAAmBC,EAAUY,OAA3C,MAAsDZ,EAAUa,YAAhE,MAIG,ICXMC,E,4MACjBL,MAAQ,CACJM,SAAS,EACTC,OAAQ,M,0LAII,yC,SACWC,MADX,0C,cACNC,E,gBACaA,EAASC,O,OAAtBC,E,OACNC,KAAKC,SAAS,CAAEC,OAAQH,EAAKI,UAAWT,SAAS,I,qIAIjD,OAAIM,KAAKZ,MAAMM,QACJ,2CAGNM,KAAKZ,MAAMc,OAITF,KAAKZ,MAAMc,OAAOE,KAAI,SAAAzB,GAAS,OAC1B,kBAAC,EAAD,CAAWA,UAAWA,OAJvB,wD,GAnBoB0B,IAAMC,WCCxBC,E,4MACjBnB,MAAQ,CACJM,SAAS,EACTc,OAAQ,M,+LAII,2D,SACWZ,MADX,4D,cACNC,E,gBACaA,EAASC,O,cACvBM,KAAI,SAAAzB,GAAS,MACU,OAAxBA,EAAUO,UAAqB,EAAKe,SAAS,CAAEQ,eAAgB9B,EAAWe,SAAS,IAAY,M,gIAMnG,OAAIM,KAAKZ,MAAMM,QACJ,yBAAKhB,UAAU,UAAf,cAGNsB,KAAKZ,MAAMqB,gBAIhBC,QAAQC,IAAIX,KAAKZ,MAAMoB,QAEnB,yBAAKI,MAAM,oBACP,2BAAOlC,UAAU,oCACb,2BAAOA,UAAU,eACb,4BACI,wBAAIA,UAAU,eAAemC,MAAM,OAAnC,KACA,wBAAInC,UAAU,eAAemC,MAAM,OAAnC,aACA,wBAAInC,UAAU,gBAAgBmC,MAAM,OAApC,UACA,wBAAInC,UAAU,gBAAgBmC,MAAM,OAApC,aACA,wBAAInC,UAAU,kBAAkBmC,MAAM,OAAtC,cAGR,+BACI,kBAAC,EAAD,MACCb,KAAKZ,MAAMqB,eAAeK,aAAaV,KAAI,SAAAU,GAAY,OACpD,kBAAC,EAAD,CAAcnC,UAAWmC,EAAcrC,UAAWqC,EAAaC,kBAnBxE,wD,GAtByBV,IAAMC,WCanCU,MAbf,WACE,OACE,yBAAKtC,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,4BACb,wBAAIkC,MAAM,yBAAV,iBACA,kBAAC,EAAD,UCEUK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,a","file":"static/js/main.9c97f017.chunk.js","sourcesContent":["import React from 'react';\n\nfunction DistrictData(props) {\n    return (\n        <tr>\n            <th>{props.stateName === 'Ahmadabad' ? 'Ahmedabad' : props.stateName}</th>\n            <td className=\"table-danger\">{props.stateData.confirmed} [+{props.stateData.delta.confirmed}]</td>\n            <td className=\"table-primary\">{props.stateData.active}</td>\n            <td className=\"table-success\">{props.stateData.recovered} [+{props.stateData.delta.recovered}]</td>\n            <td className=\"table-secondary\">{props.stateData.deceased} [+{props.stateData.delta.deceased}]</td>\n        </tr>\n    );\n}\nexport default DistrictData;","import React  from 'react';\n\nfunction StateData({stateData}) {\n    if (stateData.statecode === 'GJ' || stateData.statecode === 'TT'){       \n    return (\n        <tr key={stateData.statecode}>\n            <th>{stateData.statecode === 'TT'? 'India': stateData.state}</th>\n            <td className=\"table-danger\">{stateData.confirmed} [+{stateData.deltaconfirmed}]</td>\n            <td className=\"table-primary\">{stateData.active}</td>\n            <td className=\"table-success\">{stateData.recovered} [+{stateData.deltarecovered}]</td>\n            <td className=\"table-secondary\">{stateData.deaths} [+{stateData.deltadeaths}]</td>\n        </tr>\n    );\n    }else{\n        return('');\n    }\n}\nexport default StateData;","import React from \"react\";\nimport StateData from \"./StateData\";\n\nexport default class FetchData extends React.Component {\n    state = {\n        loading: true,\n        person: null\n    };\n\n    async componentDidMount() {\n        const url = \"https://api.covid19india.org/data.json\";\n        const response = await fetch(url);\n        const data = await response.json();\n        this.setState({ states: data.statewise, loading: false });\n    }\n\n    render() {\n        if (this.state.loading) {\n            return <div>loading...</div>;\n        }\n\n        if (!this.state.states) {\n            return <div>didn't get a states</div>;\n        }\n\n        return this.state.states.map(stateData => (\n                    <StateData stateData={stateData}/>\n                ));\n    }\n    \n}","import React from \"react\";\nimport DistrictData from \"./DistrictData\";\nimport FetchData from \"./FetchData\";\n\nexport default class FetchStateData extends React.Component {\n    state = {\n        loading: true,\n        GJData: null\n    };\n\n    async componentDidMount() {\n        const url = \"https://api.covid19india.org/v2/state_district_wise.json\";\n        const response = await fetch(url);\n        const data = await response.json();\n        data.map(stateData => (\n            stateData.statecode === 'GJ' ? this.setState({ statesWiseData: stateData, loading: false  }) : ''\n        ));\n        \n    }\n\n    render() {\n        if (this.state.loading) {\n            return <div className=\"loader\">loading...</div>;\n        }\n\n        if (!this.state.statesWiseData) {\n            return <div>didn't get a states</div>;\n        }\n        \n        console.log(this.state.GJData);\n        return (\n            <div class=\"table-responsive\">\n                <table className=\"table table-bordered table-hover\">\n                    <thead className=\"thead-light\">\n                        <tr>\n                            <th className=\"table-active\" scope=\"col\">#</th>\n                            <th className=\"table-danger\" scope=\"col\">Confirmed</th>\n                            <th className=\"table-primary\" scope=\"col\">Active</th>\n                            <th className=\"table-success\" scope=\"col\">Recovered</th>\n                            <th className=\"table-secondary\" scope=\"col\">Deceased</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <FetchData />\n                        {this.state.statesWiseData.districtData.map(districtData => (                            \n                            <DistrictData stateData={districtData} stateName={districtData.district} />\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport './App.css';\nimport FetchStateData from './Component/FetchStateData';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"text-center covid-center\">\n          <h3 class=\"text-center col-lg-12\">Covid19 India</h3>\n          <FetchStateData />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}